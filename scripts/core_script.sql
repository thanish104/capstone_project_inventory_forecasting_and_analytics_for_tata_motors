CREATE OR REPLACE TEMPORARY TABLE DEV_DB.CORE_DNA.TMP_LOB AS
SELECT DISTINCT SHA2(COALESCE(SOURCE.LOB, 'NA')) AS LOB_ID,
    SOURCE.LOB AS LINE_OF_BUSINESS,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS CREATED_DATE,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS MODIFIED_DATE
FROM DEV_DB.HISTORY_DNA.HISTORY_INVENTORY_TRANSACTION SOURCE;

MERGE INTO DEV_DB.CORE_DNA.LOB T USING DEV_DB.CORE_DNA.TMP_LOB S ON T.LOB_ID = S.LOB_ID
WHEN MATCHED THEN
UPDATE
SET T.LINE_OF_BUSINESS = S.LINE_OF_BUSINESS,
    T.MODIFIED_DATE = S.MODIFIED_DATE
    WHEN NOT MATCHED THEN
INSERT(
        LOB_ID,
        LINE_OF_BUSINESS,
        CREATED_DATE,
        MODIFIED_DATE
    )
VALUES(
        S.LOB_ID,
        S.LINE_OF_BUSINESS,
        S.CREATED_DATE,
        S.MODIFIED_DATE
    );

DROP TABLE DEV_DB.CORE_DNA.TMP_LOB;

-------------------------------------------------------------

CREATE OR REPLACE TEMPORARY TABLE DEV_DB.CORE_DNA.TMP_CAR AS
SELECT DISTINCT SHA2(COALESCE(SOURCE.PPL,'NA')) AS CAR_ID,
    SHA2(
        CONCAT_WS(
            '_',
            COALESCE(SOURCE.PPL, 'NA'),
            COALESCE(LOB.LOB_ID, 'NA')
        )
    ) AS HASH_ADDRESS,
    SOURCE.PPL AS CAR_NAME,
    LOB.LOB_ID AS LOB_ID,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS CREATED_DATE,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS MODIFIED_DATE
FROM DEV_DB.HISTORY_DNA.HISTORY_INVENTORY_TRANSACTION SOURCE
    LEFT JOIN DEV_DB.CORE_DNA.LOB LOB ON SOURCE.LOB = LOB.LINE_OF_BUSINESS;


MERGE INTO DEV_DB.CORE_DNA.CAR T USING DEV_DB.CORE_DNA.TMP_CAR S ON T.CAR_ID = S.CAR_ID
WHEN MATCHED AND T.HASH_ADDRESS != S.HASH_ADDRESS THEN
UPDATE
SET T.HASH_ADDRESS = S.HASH_ADDRESS,
    T.CAR_NAME = S.CAR_NAME,
    T.LOB_ID = S.LOB_ID,
    T.MODIFIED_DATE = S.MODIFIED_DATE
    WHEN NOT MATCHED THEN
INSERT(
        CAR_ID,
        HASH_ADDRESS,
        CAR_NAME,
        LOB_ID,
        CREATED_DATE,
        MODIFIED_DATE
    )
VALUES(
        S.CAR_ID,
        S.HASH_ADDRESS,
        S.CAR_NAME,
        S.LOB_ID,
        S.CREATED_DATE,
        S.MODIFIED_DATE
    );

DROP TABLE DEV_DB.CORE_DNA.TMP_CAR;


-----------------------------------------------------------------

CREATE OR REPLACE TEMPORARY TABLE DEV_DB.CORE_DNA.TMP_CAR_MODEL AS
SELECT DISTINCT SHA2(COALESCE(SOURCE.PL,'NA')) AS CAR_MODEL_ID,
    SHA2(
        CONCAT_WS(
            '_',
            COALESCE(SOURCE.PL, 'NA'),
            COALESCE(CAR.CAR_ID, 'NA'),
            COALESCE(LOB.LOB_ID, 'NA')
        )
    ) AS HASH_ADDRESS,
    SOURCE.PL AS CAR_MODEL_NAME,
    CAR.CAR_ID AS CAR_ID,
    LOB.LOB_ID AS LOB_ID,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS CREATED_DATE,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS MODIFIED_DATE
FROM DEV_DB.HISTORY_DNA.HISTORY_INVENTORY_TRANSACTION SOURCE
    LEFT JOIN DEV_DB.CORE_DNA.CAR CAR ON SOURCE.PPL = CAR.CAR_NAME
    LEFT JOIN DEV_DB.CORE_DNA.LOB LOB ON SOURCE.LOB = LOB.LINE_OF_BUSINESS;
  
MERGE INTO DEV_DB.CORE_DNA.CAR_MODEL T USING DEV_DB.CORE_DNA.TMP_CAR_MODEL S ON T.CAR_MODEL_ID = S.CAR_MODEL_ID
WHEN MATCHED AND T.HASH_ADDRESS != S.HASH_ADDRESS THEN
UPDATE
SET T.HASH_ADDRESS = S.HASH_ADDRESS,
    T.CAR_MODEL_NAME = S.CAR_MODEL_NAME,
    T.CAR_ID = S.CAR_ID,
    T.LOB_ID = S.LOB_ID,
    T.MODIFIED_DATE = S.MODIFIED_DATE
    WHEN NOT MATCHED THEN
INSERT(
        CAR_MODEL_ID,
        HASH_ADDRESS,
        CAR_MODEL_NAME,
        CAR_ID,
        LOB_ID,
        CREATED_DATE,
        MODIFIED_DATE
    )
VALUES(
        S.CAR_MODEL_ID,
        S.HASH_ADDRESS,
        S.CAR_MODEL_NAME,
        S.CAR_ID,
        S.LOB_ID,
        S.CREATED_DATE,
        S.MODIFIED_DATE
    );

DROP TABLE DEV_DB.CORE_DNA.TMP_CAR_MODEL;

----------------------------------------------------------

CREATE OR REPLACE TEMPORARY TABLE DEV_DB.CORE_DNA.TMP_REGION AS
SELECT DISTINCT SHA2(COALESCE(SOURCE.REGION,'NA')) AS REGION_ID,
    SOURCE.REGION AS REGION_NAME,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS CREATED_DATE,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS MODIFIED_DATE
FROM DEV_DB.HISTORY_DNA.HISTORY_INVENTORY_TRANSACTION SOURCE;
--SELECT * FROM DEV_DB.CORE_DNA.REGION

MERGE INTO DEV_DB.CORE_DNA.REGION T USING DEV_DB.CORE_DNA.TMP_REGION S ON T.REGION_ID = S.REGION_ID
WHEN MATCHED THEN
UPDATE
SET T.REGION_NAME = S.REGION_NAME,
    T.MODIFIED_DATE = S.MODIFIED_DATE
    WHEN NOT MATCHED THEN
INSERT(
        REGION_ID,
        REGION_NAME,
        CREATED_DATE,
        MODIFIED_DATE
    )
VALUES(
        S.REGION_ID,
        S.REGION_NAME,
        S.CREATED_DATE,
        S.MODIFIED_DATE
    );

DROP TABLE DEV_DB.CORE_DNA.TMP_REGION;

----------------------------------------------------------

CREATE OR REPLACE TEMPORARY TABLE DEV_DB.CORE_DNA.TMP_DIVISION AS
SELECT DISTINCT SHA2(COALESCE(SOURCE.DIVISION,'NA')) AS DIVISION_ID,
    SHA2(
        CONCAT_WS(
            '_',
            COALESCE(SOURCE.DIVISION, 'NA'),
            COALESCE(R.REGION_ID, 'NA')
        )
    ) AS HASH_ADDRESS,
    SOURCE.DIVISION AS DIVISION_NAME,
    R.REGION_ID AS REGION_ID,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS CREATED_DATE,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS MODIFIED_DATE
FROM DEV_DB.HISTORY_DNA.HISTORY_INVENTORY_TRANSACTION SOURCE
LEFT JOIN DEV_DB.CORE_DNA.REGION R ON SOURCE.REGION = R.REGION_NAME;

-- SELECT * FROM DEV_DB.CORE_DNA.DIVISION;
MERGE INTO DEV_DB.CORE_DNA.DIVISION T USING DEV_DB.CORE_DNA.TMP_DIVISION S ON T.DIVISION_ID = S.DIVISION_ID
WHEN MATCHED AND T.HASH_ADDRESS != S.HASH_ADDRESS THEN
UPDATE
SET
    T.HASH_ADDRESS = S.HASH_ADDRESS,
    T.DIVISION_NAME = S.DIVISION_NAME,
    T.REGION_ID = S.REGION_ID,
    T.MODIFIED_DATE = S.MODIFIED_DATE
    WHEN NOT MATCHED THEN
INSERT(
        DIVISION_ID,
        HASH_ADDRESS,
        DIVISION_NAME,
        REGION_ID,
        CREATED_DATE,
        MODIFIED_DATE
    )
VALUES(
        S.DIVISION_ID,
        HASH_ADDRESS,
        S.DIVISION_NAME,
        S.REGION_ID,
        S.CREATED_DATE,
        S.MODIFIED_DATE
    );

DROP TABLE DEV_DB.CORE_DNA.TMP_DIVISION;

----------------------------------------------------------
select * from DEV_DB.CORE_DNA.DIVISION;
select * from DEV_DB.HISTORY_DNA.HISTORY_INVENTORY_TRANSACTION;



-- Duplicate entry
-- check with swetha

CREATE OR REPLACE TEMPORARY TABLE DEV_DB.CORE_DNA.TMP_DEALER AS
SELECT DISTINCT SHA2(COALESCE(SOURCE.DEALER_CODE,'NA')) AS DEALER_CODE_ID,
    SHA2(
        CONCAT_WS(
            '_',
            COALESCE(SOURCE.DEALER_CODE, 'NA'),
            COALESCE(SOURCE.DEALER, 'NA'),
            COALESCE(SOURCE.PARTNER_TYPE, 'NA')
        )
    ) AS HASH_ADDRESS,
    SOURCE.DEALER_CODE AS DEALER_CODE,
    SOURCE.DEALER AS DEALER_NAME,
    SOURCE.PARTNER_TYPE AS PARTNER_TYPE,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS CREATED_DATE,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS MODIFIED_DATE
FROM DEV_DB.HISTORY_DNA.HISTORY_INVENTORY_TRANSACTION SOURCE;

 SELECT * FROM DEV_DB.CORE_DNA.TMP_DEALER;   
MERGE INTO DEV_DB.CORE_DNA.DEALER T USING DEV_DB.CORE_DNA.TMP_DEALER S ON T.DEALER_CODE_ID = S.DEALER_CODE_ID
WHEN MATCHED
AND T.HASH_ADDRESS != S.HASH_ADDRESS THEN
UPDATE
SET T.HASH_ADDRESS = S.HASH_ADDRESS,
    T.DEALER_CODE = S.DEALER_CODE,
    T.DEALER_NAME = S.DEALER_NAME,
    T.PARTNER_TYPE = S.PARTNER_TYPE,
    T.MODIFIED_DATE = S.MODIFIED_DATE
    WHEN NOT MATCHED THEN
INSERT(
        DEALER_CODE_ID,
        HASH_ADDRESS,
        DEALER_CODE,
        DEALER_NAME,
        PARTNER_TYPE,
        CREATED_DATE,
        MODIFIED_DATE
    )
VALUES(
        S.DEALER_CODE_ID,
        S.HASH_ADDRESS,
        S.DEALER_CODE,
        S.DEALER_NAME,
        S.PARTNER_TYPE,
        S.CREATED_DATE,
        S.MODIFIED_DATE
    );

DROP TABLE DEV_DB.CORE_DNA.TMP_DEALER;

------------------------------------------------------

CREATE OR REPLACE TEMPORARY TABLE DEV_DB.CORE_DNA.TMP_DEALER_DIVISION_MAPPING AS
SELECT DISTINCT 
    SHA2(
        CONCAT_WS(
            '_',
            COALESCE(DIVISION.DIVISION_ID, 'NA'),
            COALESCE(DEALER.DEALER_CODE_ID, 'NA')
        )
    ) AS DEALER_DIVISION_ID,
    SHA2(
        CONCAT_WS(
            '_',
            COALESCE(DIVISION.DIVISION_ID, 'NA'),
            COALESCE(DEALER.DEALER_CODE_ID, 'NA')
        )
    ) AS HASH_ADDRESS,
    DIVISION.DIVISION_ID AS DIVISION_ID,
    DEALER.DEALER_CODE_ID AS DEALER_CODE_ID,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS CREATED_DATE,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS MODIFIED_DATE
FROM DEV_DB.HISTORY_DNA.HISTORY_INVENTORY_TRANSACTION SOURCE
LEFT JOIN DEV_DB.CORE_DNA.DIVISION DIVISION ON SOURCE.DIVISION = DIVISION.DIVISION_NAME
LEFT JOIN DEV_DB.CORE_DNA.DEALER DEALER ON SOURCE.DEALER_CODE = DEALER.DEALER_CODE;

MERGE INTO DEV_DB.CORE_DNA.DEALER_DIVISION_MAPPING T USING DEV_DB.CORE_DNA.TMP_DEALER_DIVISION_MAPPING S ON T.DEALER_DIVISION_ID = S.DEALER_DIVISION_ID
WHEN MATCHED
AND T.HASH_ADDRESS != S.HASH_ADDRESS THEN
UPDATE
SET T.HASH_ADDRESS = S.HASH_ADDRESS,
    T.DIVISION_ID = S.DIVISION_ID,
    T.DEALER_CODE_ID = S.DEALER_CODE_ID,
    T.MODIFIED_DATE = S.MODIFIED_DATE
    WHEN NOT MATCHED THEN
INSERT(
        DEALER_DIVISION_ID,
        HASH_ADDRESS,
        DIVISION_ID,
        DEALER_CODE_ID,
        CREATED_DATE,
        MODIFIED_DATE
    )
VALUES(
        S.DEALER_DIVISION_ID,
        S.HASH_ADDRESS,
        S.DIVISION_ID,
        S.DEALER_CODE_ID,
        S.CREATED_DATE,
        S.MODIFIED_DATE
    );

DROP TABLE DEV_DB.CORE_DNA.TMP_DEALER_DIVISION_MAPPING;

----------------------------------------------------------

CREATE OR REPLACE TEMPORARY TABLE DEV_DB.CORE_DNA.TMP_SERVICE AS
SELECT DISTINCT SHA2(COALESCE(SOURCE.SERVICE_TYPE,'NA')) AS SERVICE_ID,
    SOURCE.SERVICE_TYPE AS SERVICE_TYPE,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS CREATED_DATE,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS MODIFIED_DATE
FROM DEV_DB.HISTORY_DNA.HISTORY_INVENTORY_TRANSACTION SOURCE;
-- SELECT * FROM DEV_DB.CORE_DNA.SERVICE;

MERGE INTO DEV_DB.CORE_DNA.SERVICE T USING DEV_DB.CORE_DNA.TMP_SERVICE S ON T.SERVICE_ID = S.SERVICE_ID
WHEN MATCHED THEN
UPDATE
SET T.SERVICE_TYPE = S.SERVICE_TYPE,
    T.MODIFIED_DATE = S.MODIFIED_DATE
    WHEN NOT MATCHED THEN
INSERT(
        SERVICE_ID,
        SERVICE_TYPE,
        CREATED_DATE,
        MODIFIED_DATE
    )
VALUES(
        S.SERVICE_ID,
        S.SERVICE_TYPE,
        S.CREATED_DATE,
        S.MODIFIED_DATE
    );

DROP TABLE DEV_DB.CORE_DNA.TMP_SERVICE;


----------------------------------------------------------

CREATE OR REPLACE TEMPORARY TABLE DEV_DB.CORE_DNA.TMP_JOB_CARD AS
SELECT DISTINCT SHA2(COALESCE(SOURCE.JOB_CARD_NUMBER, 'NA')) AS JOB_CARD_ID,
    SHA2(
        CONCAT_WS(
            '_',
            COALESCE(SOURCE.JOB_CARD_NUMBER, 'NA'),
            COALESCE(SOURCE.JC_OPEN_DAYS, 0),
            COALESCE(SOURCE.JOB_CARD_CREATED_DATE, '1900-01-01'),
            COALESCE(SOURCE.JOB_CARD_CLOSED_DATE, '1900-01-01'),
            COALESCE(SOURCE.KMS_RUN, 0),
            COALESCE(DEALER.DEALER_CODE_ID, 'NA'),
            COALESCE(CM.CAR_MODEL_ID, 'NA'),
            COALESCE(SERVICE.SERVICE_ID, 'NA')
        )
    ) AS HASH_ADDRESS,
    SOURCE.JOB_CARD_NUMBER AS JOB_CARD_NUM,
    SOURCE.JC_OPEN_DAYS AS JC_OPEN_DAYS,
    SOURCE.JOB_CARD_CREATED_DATE AS JOB_CARD_CREATED_DATE,
    SOURCE.JOB_CARD_CLOSED_DATE AS JOB_CARD_CLOSED_DATE,
    SOURCE.KMS_RUN AS KMS_RUN,
    DEALER.DEALER_CODE_ID AS DEALER_CODE_ID,
    CM.CAR_MODEL_ID AS CAR_MODEL_ID,
    SERVICE.SERVICE_ID AS SERVICE_ID,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS CREATED_DATE,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS MODIFIED_DATE
FROM DEV_DB.HISTORY_DNA.HISTORY_INVENTORY_TRANSACTION SOURCE
    LEFT JOIN DEV_DB.CORE_DNA.DEALER DEALER ON SOURCE.DEALER_CODE = DEALER.DEALER_CODE
    LEFT JOIN DEV_DB.CORE_DNA.CAR_MODEL CM ON SOURCE.PL = CM.CAR_MODEL_NAME
    LEFT JOIN DEV_DB.CORE_DNA.SERVICE SERVICE ON SOURCE.SERVICE_TYPE = SERVICE.SERVICE_TYPE;

-- SELECT * FROM DEV_DB.CORE_DNA.JOB_CARD;
MERGE INTO DEV_DB.CORE_DNA.JOB_CARD T USING DEV_DB.CORE_DNA.TMP_JOB_CARD S ON T.JOB_CARD_ID = S.JOB_CARD_ID
WHEN MATCHED
AND T.HASH_ADDRESS != S.HASH_ADDRESS THEN
UPDATE
SET T.HASH_ADDRESS = S.HASH_ADDRESS,
    T.JOB_CARD_NUM = S.JOB_CARD_NUM,
    T.JC_OPEN_DAYS = S.JC_OPEN_DAYS,
    T.JOB_CARD_CREATED_DATE = S.JOB_CARD_CREATED_DATE,
    T.JOB_CARD_CLOSED_DATE = S.JOB_CARD_CLOSED_DATE,
    T.KMS_RUN = S.KMS_RUN,
    T.DEALER_CODE_ID = S.DEALER_CODE_ID,
    T.CAR_MODEL_ID = S.CAR_MODEL_ID,
    T.SERVICE_ID = S.SERVICE_ID,
    T.MODIFIED_DATE = S.MODIFIED_DATE
    WHEN NOT MATCHED THEN
INSERT(
        JOB_CARD_ID,
        HASH_ADDRESS,
        JOB_CARD_NUM,
        JC_OPEN_DAYS,
        JOB_CARD_CREATED_DATE,
        JOB_CARD_CLOSED_DATE,
        KMS_RUN,
        DEALER_CODE_ID,
        CAR_MODEL_ID,
        SERVICE_ID,
        CREATED_DATE,
        MODIFIED_DATE
    )
VALUES(
        S.JOB_CARD_ID,
        S.HASH_ADDRESS,
        S.JOB_CARD_NUM,
        S.JC_OPEN_DAYS,
        S.JOB_CARD_CREATED_DATE,
        S.JOB_CARD_CLOSED_DATE,
        S.KMS_RUN,
        S.DEALER_CODE_ID,
        S.CAR_MODEL_ID,
        S.SERVICE_ID,
        S.CREATED_DATE,
        S.MODIFIED_DATE
    );

drop table DEV_DB.CORE_DNA.TMP_JOB_CARD;

----------------------------------------------------------
-- invoice day issue

CREATE OR REPLACE TEMPORARY TABLE DEV_DB.CORE_DNA.TMP_INVOICE_LINE_ITEM AS
SELECT DISTINCT SHA2(COALESCE(SOURCE.INVOICE_NUMBER, 'NA')) AS INVOICE_LINE_ITEM_ID,
    SHA2(
        CONCAT_WS(
            '_',
            COALESCE(SOURCE.INVOICE_NUMBER, 'NA'),
            COALESCE(SOURCE.INVOICE_DATE, '1900-01-01'),
            COALESCE(SOURCE.INVOICE_STATUS, 'NA'),
            COALESCE(JC.JOB_CARD_ID, 'NA')
        )
    ) AS HASH_ADDRESS,
    SOURCE.INVOICE_NUMBER AS INVOICE_NUMBER,
    SOURCE.INVOICE_DATE AS INVOICE_DATE,
    SOURCE.INVOICE_STATUS AS INVOICE_STATUS,
    JC.JOB_CARD_ID AS JOB_CARD_ID,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS CREATED_DATE,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS MODIFIED_DATE
FROM DEV_DB.HISTORY_DNA.HISTORY_INVENTORY_TRANSACTION SOURCE
    LEFT JOIN DEV_DB.CORE_DNA.JOB_CARD JC ON SOURCE.JOB_CARD_NUMBER = JC.JOB_CARD_NUM;

    -- SELECT * fROM DEV_DB.CORE_DNA.INVOICE_LINE_ITEM;
MERGE INTO DEV_DB.CORE_DNA.INVOICE_LINE_ITEM T USING DEV_DB.CORE_DNA.TMP_INVOICE_LINE_ITEM S ON T.INVOICE_LINE_ITEM_ID = S.INVOICE_LINE_ITEM_ID
WHEN MATCHED
AND T.HASH_ADDRESS != S.HASH_ADDRESS THEN
UPDATE
SET T.HASH_ADDRESS = S.HASH_ADDRESS,
    T.INVOICE_NUMBER = S.INVOICE_NUMBER,
    T.INVOICE_DATE = S.INVOICE_DATE,
    T.INVOICE_STATUS = S.INVOICE_STATUS,
    T.JOB_CARD_ID = S.JOB_CARD_ID,
    T.MODIFIED_DATE = S.MODIFIED_DATE
    WHEN NOT MATCHED THEN
INSERT(
        INVOICE_LINE_ITEM_ID,
        HASH_ADDRESS,
        INVOICE_NUMBER,
        INVOICE_DATE,
        INVOICE_STATUS,
        JOB_CARD_ID,
        CREATED_DATE,
        MODIFIED_DATE
    )
VALUES(
        S.INVOICE_LINE_ITEM_ID,
        S.HASH_ADDRESS,
        S.INVOICE_NUMBER,
        S.INVOICE_DATE,
        S.INVOICE_STATUS,
        S.JOB_CARD_ID,
        S.CREATED_DATE,
        S.MODIFIED_DATE
    );

drop table DEV_DB.CORE_DNA.TMP_INVOICE_LINE_ITEM;

----------------------------------------------------------

CREATE OR REPLACE TEMPORARY TABLE DEV_DB.CORE_DNA.TMP_PART_CATEGORY AS
SELECT DISTINCT SHA2(COALESCE(SOURCE.CATEGORY,'NA')) AS CATEGORY_ID,
    SOURCE.CATEGORY AS CATEGORY_NAME,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS CREATED_DATE,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS MODIFIED_DATE
FROM DEV_DB.HISTORY_DNA.HISTORY_INVENTORY_TRANSACTION SOURCE;


MERGE INTO DEV_DB.CORE_DNA.PART_CATEGORY T USING DEV_DB.CORE_DNA.TMP_PART_CATEGORY S ON T.CATEGORY_ID = S.CATEGORY_ID
WHEN MATCHED THEN
UPDATE
SET T.CATEGORY_NAME = S.CATEGORY_NAME,
    T.MODIFIED_DATE = S.MODIFIED_DATE
    WHEN NOT MATCHED THEN
INSERT(
        CATEGORY_ID,
        CATEGORY_NAME,
        CREATED_DATE,
        MODIFIED_DATE
    )
VALUES(
        S.CATEGORY_ID,
        S.CATEGORY_NAME,
        S.CREATED_DATE,
        S.MODIFIED_DATE
    );

drop table DEV_DB.CORE_DNA.TMP_PART_CATEGORY;

----------------------------------------------------------

CREATE OR REPLACE TEMPORARY TABLE DEV_DB.CORE_DNA.TMP_PARTS AS
SELECT DISTINCT SHA2(
concat (
COALESCE(SOURCE.PART_NO,'NA'),
COALESCE(SOURCE.PART_DESC, 'NA')
) 
) AS PART_NO_ID,
    SHA2(
        CONCAT_WS(
            '_',
            COALESCE(SOURCE.PART_NO, 'NA'),
            COALESCE(SOURCE.PART_DESC, 'NA'),
            COALESCE(SOURCE.TM_PART_INDICATOR, 'NA'),
            COALESCE(SOURCE.TM_SPARES_AMOUNT, 0),
            COALESCE(SOURCE.SPARES_AMOUNT, 0),
            COALESCE(C.CATEGORY_ID, 'NA')
        )
    ) AS HASH_ADDRESS,
    SOURCE.PART_NO AS PART_NO,
    SOURCE.PART_DESC AS PART_DESC,
    SOURCE.TM_PART_INDICATOR AS TM_PART_INDICATOR,
    SOURCE.TM_SPARES_AMOUNT AS TM_SPARES_AMOUNT,
    SOURCE.SPARES_AMOUNT AS SPARES_AMOUNT,
    C.CATEGORY_ID AS CATEGORY_ID,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS CREATED_DATE,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS MODIFIED_DATE
FROM DEV_DB.HISTORY_DNA.HISTORY_INVENTORY_TRANSACTION SOURCE
LEFT JOIN DEV_DB.CORE_DNA.PART_CATEGORY C ON SOURCE.CATEGORY = C.CATEGORY_NAME;

-- SELECT part_no_id,count(*) FROM DEV_DB.CORE_DNA.TMP_PARTS
-- group by part_no_id
-- having count(*)>1;

MERGE INTO DEV_DB.CORE_DNA.PARTS T USING DEV_DB.CORE_DNA.TMP_PARTS S ON T.PART_NO_ID = S.PART_NO_ID
WHEN MATCHED
AND T.HASH_ADDRESS != S.HASH_ADDRESS THEN
UPDATE
SET T.HASH_ADDRESS = S.HASH_ADDRESS,
    T.PART_NO = S.PART_NO,
    T.PART_DESC = S.PART_DESC,
    T.TM_PART_INDICATOR = S.TM_PART_INDICATOR,
    T.TM_SPARES_AMOUNT = S.TM_SPARES_AMOUNT,
    T.SPARES_AMOUNT = S.SPARES_AMOUNT,
    T.CATEGORY_ID = S.CATEGORY_ID,
    T.MODIFIED_DATE = S.MODIFIED_DATE
    WHEN NOT MATCHED THEN
INSERT(
        PART_NO_ID,
        HASH_ADDRESS,
        PART_NO,
        PART_DESC,
        TM_PART_INDICATOR,
        TM_SPARES_AMOUNT,
        SPARES_AMOUNT,
        CATEGORY_ID,
        CREATED_DATE,
        MODIFIED_DATE
    )
VALUES(
        S.PART_NO_ID,
        S.HASH_ADDRESS,
        S.PART_NO,
        S.PART_DESC,
        S.TM_PART_INDICATOR,
        S.TM_SPARES_AMOUNT,
        S.SPARES_AMOUNT,
        S.CATEGORY_ID,
        S.CREATED_DATE,
        S.MODIFIED_DATE
    );

drop table DEV_DB.CORE_DNA.TMP_PARTS;


----------------------------------------------------------

CREATE OR REPLACE TEMPORARY TABLE DEV_DB.CORE_DNA.TMP_INVOICE_LINE_ITEM_DETAILS AS
SELECT DISTINCT SHA2(
        CONCAT(
            COALESCE(SOURCE.INVOICE_NUMBER, 'NA'),
            COALESCE(JC.JOB_CARD_ID, 'NA'),
            COALESCE(P.PART_NO_ID, 'NA')
        )
    ) AS INVOICE_LINE_ITEM_DETAILS_ID,
    SHA2(
        CONCAT_WS(
            '_',
            COALESCE(SOURCE.INVOICE_NUMBER, 'NA'),
            COALESCE(P.PART_NO_ID, 'NA'),
            COALESCE(SOURCE.TM_SPARES_AMOUNT, 0),
            COALESCE(SOURCE.SOLD_QTY, 0),
            COALESCE(SOURCE.SPARES_AMOUNT, 0),
            COALESCE(ILT.INVOICE_LINE_ITEM_ID, 'NA'),
            COALESCE(JC.JOB_CARD_ID, 'NA')
        )
    ) AS HASH_ADDRESS,
    SOURCE.TM_SPARES_AMOUNT AS TM_SPARES_AMOUNT,
    SOURCE.SOLD_QTY AS SOLD_QTY,
    SOURCE.SPARES_AMOUNT AS SPARES_AMOUNT,
    ILT.INVOICE_LINE_ITEM_ID AS INVOICE_LINE_ITEM_ID,
    JC.JOB_CARD_ID AS JOB_CARD_ID,
    P.PART_NO_ID AS PART_NO_ID,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS CREATED_DATE,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS MODIFIED_DATE
FROM DEV_DB.HISTORY_DNA.HISTORY_INVENTORY_TRANSACTION SOURCE
    LEFT JOIN DEV_DB.CORE_DNA.INVOICE_LINE_ITEM ILT ON SOURCE.INVOICE_NUMBER = ILT.INVOICE_NUMBER
    LEFT JOIN DEV_DB.CORE_DNA.JOB_CARD JC ON SOURCE.JOB_CARD_NUMBER = JC.JOB_CARD_NUM
    LEFT JOIN DEV_DB.CORE_DNA.PARTS P ON SOURCE.PART_NO = P.PART_NO;

  -- SELECT * FROM DEV_DB.CORE_DNA.INVOICE_LINE_ITEM_DETAILS;  
  
MERGE INTO DEV_DB.CORE_DNA.INVOICE_LINE_ITEM_DETAILS T USING DEV_DB.CORE_DNA.TMP_INVOICE_LINE_ITEM_DETAILS S ON T.INVOICE_LINE_ITEM_DETAILS_ID = S.INVOICE_LINE_ITEM_DETAILS_ID
WHEN MATCHED
AND T.HASH_ADDRESS != S.HASH_ADDRESS THEN
UPDATE
SET T.HASH_ADDRESS = S.HASH_ADDRESS,
    T.TM_SPARES_AMOUNT = S.TM_SPARES_AMOUNT,
    T.SOLD_QTY = S.SOLD_QTY,
    T.SPARES_AMOUNT = S.SPARES_AMOUNT,
    T.INVOICE_LINE_ITEM_ID = S.INVOICE_LINE_ITEM_ID,
    T.JOB_CARD_ID = S.JOB_CARD_ID,
    T.PART_NO_ID = S.PART_NO_ID,
    T.MODIFIED_DATE = S.MODIFIED_DATE
    WHEN NOT MATCHED THEN
INSERT(
        INVOICE_LINE_ITEM_DETAILS_ID,
        HASH_ADDRESS,
        TM_SPARES_AMOUNT,
        SOLD_QTY,
        SPARES_AMOUNT,
        INVOICE_LINE_ITEM_ID,
        JOB_CARD_ID,
        PART_NO_ID,
        CREATED_DATE,
        MODIFIED_DATE
    )
VALUES(
        S.INVOICE_LINE_ITEM_DETAILS_ID,
        S.HASH_ADDRESS,
        S.TM_SPARES_AMOUNT,
        S.SOLD_QTY,
        S.SPARES_AMOUNT,
        S.INVOICE_LINE_ITEM_ID,
        S.JOB_CARD_ID,
        S.PART_NO_ID,
        S.CREATED_DATE,
        S.MODIFIED_DATE
    );

drop table DEV_DB.CORE_DNA.TMP_INVOICE_LINE_ITEM_DETAILS;